// JavaScript PEG/Pest grammar

WHITESPACE = _{ " " | NEWLINE }

program = { SOI ~ (statement ~ ";"?)* ~ EOI }
statement = _{ declaration | expression | return_statement }
    return_statement = { "return" ~ expression }
expression = _{ ((value ~ operator ~ value) | value) ~ ";"? }
declaration = { ("const" | "let" | "var")? ~ value ~ assignment_operator ~ expression }

// identifiers
identifier = ${ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "$")* }
keyword = _{ "return" | "const" | "let" | "var" | "function" }

// punctuators
operator = { binary_operator | assignment_operator }
    binary_operator = _{ bitwise_operator | "+" | "-" | "*" | "/" | "%" | "**" | "==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=" | "&&" | "||" }
        bitwise_operator = _{ "&" | "|" | "^" | "<<" | ">>" | ">>>" }
assignment_operator = _{ "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" | "**=" }

// values
value = _{ boolean | number | string | object | function | nullish | regex | keyword | identifier | array }
    boolean = { "true" | "false" }
    nullish = { null | undefined }
        null = { "null" }
        undefined = { "undefined" }
    string = { "\"" ~ inner ~ "\"" | "\'" ~ inner ~ "\'" }
        inner = ${ char* }
            char = { !("\"" | "\\") ~ ANY }
    number = ${
        "-"?
        ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
        ~ ("." ~ ASCII_DIGIT+)?
        ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
    }
    array = { "[" ~ (value ~ ",")*? ~ value? ~ "]" }
    object = { "("? ~ "{" ~ pair* ~ "}" ~ ")"? }
        pair = { pair_key ~ ":" ~ value ~ ","? }
        pair_key = _{ string | number | identifier }
    regex = { "/" ~ inner ~ "/" }
    function = { "function" ~ identifier? ~ "(" ~ (identifier ~ ("," ~ identifier)?)* ~ ")" ~ ("{" ~ function_body? ~ "}" | function_body?) }
        function_body = {  statement* }