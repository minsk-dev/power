// JavaScript PEG/Pest grammar

WHITESPACE = _{ " " | NEWLINE }

program = { SOI ~ (statement ~ ";"?)* ~ EOI } // FIXME: Everything regarding semicolons is buggy
statement = _{ if_statement | declaration | return_statement | while_statement | for_statement | function_statement | expression }
    return_statement = { "return" ~ expression }
    declaration = { declaration_type? ~ identifier ~ assignment_operator ~ expression }
        declaration_type = { "const" | "let" | "var" }
    if_statement = {
        "if" ~ "(" ~ expression ~ ")" ~ (("{" ~ statement* ~ "}") | statement)
        ~ (("else" ~ (("{" ~ statement* ~ "}") | statement))
        | ("else" ~ "if" ~ if_statement))?
    }
    while_statement = { "while" ~ "(" ~ expression ~ ")" ~ (("{" ~ statement* ~ "}") | statement) }
    for_statement = { "for" ~ "(" ~ for_expression ~ ")" ~ (("{" ~ statement* ~ "}") | statement) }
        for_expression = { declaration ~ expression ~ expression }
    function_statement = { function }
expression = _{ ((value ~ operator ~ value) | (value ~ postfix_operator) | function_call | value) ~ ";"? } // FIXME: semicolon
    function_call = { !"function" ~ member_expression ~ "(" ~ arguments_call? ~ ")" }
arguments = { identifier ~ ("," ~ identifier)* }
arguments_call = { expression ~ ("," ~ expression)* }

// identifiers
member_expression = ${ identifier ~ (("." ~ identifier) | key_access | ASCII_DIGIT)* }
    identifier = @{ (ASCII_ALPHA | "_" | "$") ~ (ASCII_ALPHANUMERIC | "_" | "$")* }
    key_access = { "[" ~ expression ~ "]" }
// ignores keywords
keyword = _{ "return" | "const" | "let" | "var" | "function" }

// punctuators
operator = { binary_operator | assignment_operator }
    binary_operator = _{ bitwise_operator | "+" | "-" | "*" | "/" | "%" | "**" | "==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=" | "&&" | "||" }
        bitwise_operator = _{ "&" | "|" | "^" | "<<" | ">>" | ">>>" }
assignment_operator = _{ "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" | "**=" }
    postfix_operator = { "++" | "--" }

// literals
literal = _{ number | string | boolean | nullish }
value = _{ literal | object | function | arrow_function | regex | keyword | member_expression | array }
    boolean = { "true" | "false" }
    nullish = { null | undefined }
        null = { "null" }
        undefined = { "undefined" }
    string = { "\"" ~ inner ~ "\"" | "\'" ~ inner ~ "\'" }
        inner = ${ char* }
            char = _{ !("\"" | "\'" | "\\") ~ ANY }
    number = @{
        "-"?
        ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
        ~ ("." ~ ASCII_DIGIT+)?
        ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
    }
    array = { "[" ~ (value ~ ",")*? ~ value? ~ "]" }
    object = { "("? ~ "{" ~ pair* ~ "}" ~ ")"? }
        pair = { pair_key ~ ":" ~ value ~ ","? }
        pair_key = _{ string | number | identifier }
    regex = { "/" ~ inner ~ "/" }
    function = { "function" ~ identifier? ~ "(" ~ arguments? ~ ")" ~ ("{" ~ function_body? ~ "}" | function_body?) }
        function_body = { statement* }
    arrow_function = { "(" ~ arguments? ~ ")" ~ "=>" ~ ("{" ~ function_body? ~ "}" | arrow_function_body?) }
        arrow_function_body = { implicit_return | statement* }
        implicit_return = { expression }