// JavaScript PEG/Pest grammar

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

program = { SOI ~ (statement ~ ";"?)* ~ EOI }
statement = _{ declaration | expression | return_statement }
    return_statement = { "return" ~ expression }
expression = _{ ((value ~ operator ~ value) | value) ~ ";"? }
declaration = { ("const" | "let" | "var")? ~ value ~ assignment_operator ~ expression }

// identifiers
name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "$")* }

// punctuators
operator = { binary_operator | assignment_operator }
    binary_operator = { bitwise_operator | "+" | "-" | "*" | "/" | "%" | "**" | "==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=" | "&&" | "||" }
        bitwise_operator = { "&" | "|" | "^" | "<<" | ">>" | ">>>" }
assignment_operator = { "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" | "**=" }

// values
value = { boolean | number | string | object | function | nullish | regex | name | array }
    boolean = { "true" | "false" }
    nullish = { null | undefined }
        null = { "null" }
        undefined = { "undefined" }
    string = { "\"" ~ inner ~ "\"" | "\'" ~ inner ~ "\'" }
        inner = @{ char* }
            char = { !("\"" | "\\") ~ ANY }
    number = @{
        "-"?
        ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
        ~ ("." ~ ASCII_DIGIT+)?
        ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
    }
    array = { "[" ~ (value ~ ",")*? ~ value? ~ "]" }
    object = { "("? ~ "{" ~ pair* ~ "}" ~ ")"? }
        pair = { pair_key ~ ":" ~ value ~ ","? }
        pair_key = _{ string | number | name }
    regex = { "/" ~ inner ~ "/" }

function = { "function" ~ name? ~ "(" ~ (name ~ ("," ~ name)?)* ~ ")" ~ "{"? ~ function_body? ~ "}"? }
    function_body = _{ ("return" ~ value ~ ";"?) | statement }